@page "/film"


@using DataLibrary
@using BlazorServer.Models
@using Microsoft.Extensions.Configuration
@inject IConfiguration _config
@inject IDataAccess _data
@inject NavigationManager UriHelper
@using Microsoft.AspNetCore.WebUtilities


<h3>Film</h3>

@if (film == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <style>
        table {
            font-family: arial, sans-serif;
            border-collapse: collapse;
            width: 100%;
        }

        td, th {
            border: 1px solid #dddddd;
            text-align: left;
            padding: 8px;
        }

        tr:nth-child(even) {
            background-color: #dddddd;
        }
    </style>
    <br />
    <br />
    <table>
        <tr>
            <th>Film ID</th>
            <th>Filmtitel</th>
            <th>Erscheinungsdatum</th>
            <th>Prod Id</th>
        </tr>
        @foreach (var f in film)
        {
            <tr>
                <td>
                    @f.film_Id
                </td>
                <td>
                    @f.film_Titel
                </td>
                <td>
                    @f.film_Datum.ToString("dd.MM.yyyy")
                </td>
                <td>
                    @f.prod_Id
                </td>
                @*<td>

                    <a class="btn btn-dark" href="@("/details?FilmID="+f.film_Id.ToString())">Details</a>

                </td>*@
                @*<td>

                    <button class="btn btn-danger" @onclick="@(async () => await DeleteData(m.mov_Id))">Delete</button>

                </td>*@
            </tr>
        }
    </table>

    @*<br />
    <br />
    <form action="/details">
        <label for="Start Date">Zeitraum:</label>
        <input @bind="_value1" class="_value1" type="date" id="_value1" name="startdate" min="1900-01-01">
        <label for="End Date">   -   </label>
        <input @bind="_value2" class="_value2" type="date" id="_value2" name="enddate" max="_today">
        <button class="btn btn-dark">Search</button>
    </form>*@
}

@code {
    List<FilmModel> film;

    private string queryStart;
    private string queryEnd;
    private string queryID;

    private async Task LoadAllData()
    {
        string sql = "select * from film";

        film = await _data.LoadData<FilmModel, dynamic>(sql, new { }, _config.GetConnectionString("default"));
    }

    protected override async Task OnInitializedAsync()
    {
        var uri = UriHelper.ToAbsoluteUri(UriHelper.Uri);

        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("startdate", out var param))
        {
            queryStart = param.First();
        }
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("enddate", out param))
        {
            queryEnd = param.First();
        }

        if (queryStart == null && queryEnd == null)
        {
            await LoadAllData();
        }
        //else
        //{
        //    await SearchData(queryStart, queryEnd);
        //}
    }
}
